// Square Root Computation in Composite Modulus (Generic Solution) - Mert Yassi

mod_exp:=function(a,b,p)
	res := 1;
	while b gt 0 do
		if b mod 2 eq 1 then
			res := (res*a) mod p;
		end if;
		b := b div 2;
		a := (a*a) mod p;
	end while;
	return res;
end function;

legendre_symbol:=function(a,p)
	return mod_exp(a, (p-1) div 2, p);
end function;

gcd:=function(a,b)
	while b ne 0 do
		t:=b; b:=a mod b; a:=t;
	end while;
	return a; 
end function;

extended_gcd:=function(a,b)
	S:=0; s:=1; T:=1; t:=0;
	while b ne 0 do
		q:=a div b;
		at:=b; b:=a-q*b; a:=at;
		st:=S; S:=s-q*S; s:=st;	
		tt:=T; T:=t-q*T; t:=tt;
	end while;
	return s; // return modular inverse of a
end function;

crt:=function(X,N,n)
	assert #X eq #N; // check if num of Xs = num of Ns

	prod:=1;
	for i:=1 to #N do
		prod:=prod*N[i];
	end for;

	Y:=[]; Z:=[]; sum:=0;
	for i:=1 to #N do
		Y[i]:=prod div N[i];
		Z[i]:=extended_gcd(Y[i],N[i]);
		sum:=(sum+X[i]*Y[i]*Z[i]) mod n;
	end for;

	return sum;
end function;

prime_power_mod_sqrt:=function(a,p,e)
	// (g | p) = -1
	repeat
		g := Random(p);
	until gcd(g,p) eq 1 and legendre_symbol(g,p) eq p-1;	

	// p - 1 = 2^h * m 
	pp:=Intseq(p-1,2);
	h := 0; i := 1;
	while pp[i] eq 0 do
		h := h+1; i := i+1;
	end while;
	m := (p-1) div 2^h;
	assert p-1 eq (2^h)*m;

	// solve discrete logarithm problem, find x
	x := 0; i := 0;
	while i ne 1 do
		if mod_exp(a, m, p) eq mod_exp(g, m*x, p) then
			i := 1;
		else
			x := x+2;
		end if;
	end while;

	k := g^((m*x) div 2);
	t := (m-1) div 2;
	b := (k*mod_exp(a, (-t+p-1), p)) mod p; // a^(p-1) mod p = 1. a^(-t) mod p = a^(-t+p-1) mod p.

	// hensel lifting
	for f:=1 to e-1 do
		s := ((a-b^2) div p^f) mod p^(f+1); 
		b_inv := extended_gcd(2*b,p^(f+1)) mod p^(f+1); // 2b^(-1) mod p^e
		h := b_inv*s mod p^(f+1);
		z := b+h*mod_exp(p, f, p^(f+1));
		b := z;
	end for;
	return b;
end function;

output:=function(a,n,P,B,N,b);
	printf "\na = %o\n",a;
	printf "n = %o\n",n;
	printf "b^2 == a (mod n)\n\n";
	printf "Factors of n = %o\n",P;

	printf "\nSquare Roots in Modulus p_1,p_2,...,p_n\n";
	for i:=1 to #B do
		printf "\n%o^2 == %o (mod %o)\n",B[i],a,N[i];
		a mod N[i] eq B[i]^2 mod N[i]; 
	end for;

	printf "\nSquare Root in Modulus n\n";
	printf "\n%o^2 == %o (mod %o)\n",b,a,n;
	return a mod n eq b^2 mod n;
end function;

/*----------- MAIN -----------*/
s := 2^24;
b := Random(s);
n := Random(s); // n = p_1^e_1 * p_2^e_2 ... * p_k^e_k.
P := Factorization(n);
a := b^2 mod n; // b^2 == a mod n

k := 1; t := 1;
repeat
	B := []; N := [];
	for i:=1 to #P do
		p := P[i][1];
		e := P[i][2];
		if a mod p eq 0 then
			if a mod p^e ne 0 then // corner case occurs
				B[i] := k*p; // try p,2p,3p,... until finding the root
				k := k + 1;
			else
				B[i] := 0; 
			end if;
		elif p eq 2 then // corner case occurs
			B[i] := t; // try 1,2,3,... until finding the root
			t := t + 1;
		else	
			b := prime_power_mod_sqrt(a,p,e);
			B[i] := b;
		end if;	
	end for;

	for i:=1 to #P do // adjust P array
		N[i] := P[i][1]^P[i][2];
	end for;

	b := crt(B,N,n); // compose the results with chinese remainder theorem
until a mod n eq b^2 mod n;
output(a,n,P,B,N,b);



